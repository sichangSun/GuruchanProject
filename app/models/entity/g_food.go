// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package entity

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// GFood is an object representing the database table.
type GFood struct {
	FoodId         int         `boil:"foodId" json:"foodId" toml:"foodId" yaml:"foodId"`
	UUserId        int         `boil:"u_userId" json:"u_userId" toml:"u_userId" yaml:"u_userId"`
	RestaurantName string      `boil:"restaurantName" json:"restaurantName" toml:"restaurantName" yaml:"restaurantName"`
	FoodName       null.String `boil:"foodName" json:"foodName,omitempty" toml:"foodName" yaml:"foodName,omitempty"`
	Address        null.String `boil:"address" json:"address,omitempty" toml:"address" yaml:"address,omitempty"`
	FullAddress    null.String `boil:"fullAddress" json:"fullAddress,omitempty" toml:"fullAddress" yaml:"fullAddress,omitempty"`
	IsLikeflag     null.Int    `boil:"isLikeflag" json:"isLikeflag,omitempty" toml:"isLikeflag" yaml:"isLikeflag,omitempty"`
	Typecode       null.Int    `boil:"typecode" json:"typecode,omitempty" toml:"typecode" yaml:"typecode,omitempty"`
	FAddTime       time.Time   `boil:"f_addTime" json:"f_addTime" toml:"f_addTime" yaml:"f_addTime"`
	FUpdataTime    null.Time   `boil:"f_updataTime" json:"f_updataTime,omitempty" toml:"f_updataTime" yaml:"f_updataTime,omitempty"`
	FirstTime      null.Time   `boil:"firstTime" json:"firstTime,omitempty" toml:"firstTime" yaml:"firstTime,omitempty"`
	TestedFlag     null.Int    `boil:"testedFlag" json:"testedFlag,omitempty" toml:"testedFlag" yaml:"testedFlag,omitempty"`
	FoodImg        null.String `boil:"foodImg" json:"foodImg,omitempty" toml:"foodImg" yaml:"foodImg,omitempty"`
	IsDel          null.Int    `boil:"isDel" json:"isDel,omitempty" toml:"isDel" yaml:"isDel,omitempty"`

	R *gFoodR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L gFoodL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var GFoodColumns = struct {
	FoodId         string
	UUserId        string
	RestaurantName string
	FoodName       string
	Address        string
	FullAddress    string
	IsLikeflag     string
	Typecode       string
	FAddTime       string
	FUpdataTime    string
	FirstTime      string
	TestedFlag     string
	FoodImg        string
	IsDel          string
}{
	FoodId:         "foodId",
	UUserId:        "u_userId",
	RestaurantName: "restaurantName",
	FoodName:       "foodName",
	Address:        "address",
	FullAddress:    "fullAddress",
	IsLikeflag:     "isLikeflag",
	Typecode:       "typecode",
	FAddTime:       "f_addTime",
	FUpdataTime:    "f_updataTime",
	FirstTime:      "firstTime",
	TestedFlag:     "testedFlag",
	FoodImg:        "foodImg",
	IsDel:          "isDel",
}

var GFoodTableColumns = struct {
	FoodId         string
	UUserId        string
	RestaurantName string
	FoodName       string
	Address        string
	FullAddress    string
	IsLikeflag     string
	Typecode       string
	FAddTime       string
	FUpdataTime    string
	FirstTime      string
	TestedFlag     string
	FoodImg        string
	IsDel          string
}{
	FoodId:         "g_food.foodId",
	UUserId:        "g_food.u_userId",
	RestaurantName: "g_food.restaurantName",
	FoodName:       "g_food.foodName",
	Address:        "g_food.address",
	FullAddress:    "g_food.fullAddress",
	IsLikeflag:     "g_food.isLikeflag",
	Typecode:       "g_food.typecode",
	FAddTime:       "g_food.f_addTime",
	FUpdataTime:    "g_food.f_updataTime",
	FirstTime:      "g_food.firstTime",
	TestedFlag:     "g_food.testedFlag",
	FoodImg:        "g_food.foodImg",
	IsDel:          "g_food.isDel",
}

// Generated where

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod   { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod   { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod   { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) LIKE(x string) qm.QueryMod  { return qm.Where(w.field+" LIKE ?", x) }
func (w whereHelperstring) NLIKE(x string) qm.QueryMod { return qm.Where(w.field+" NOT LIKE ?", x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_String) LIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" LIKE ?", x)
}
func (w whereHelpernull_String) NLIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT LIKE ?", x)
}
func (w whereHelpernull_String) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_String) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpernull_Int struct{ field string }

func (w whereHelpernull_Int) EQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int) NEQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int) LT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int) LTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int) GT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int) GTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_Int) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_Int) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_Int) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var GFoodWhere = struct {
	FoodId         whereHelperint
	UUserId        whereHelperint
	RestaurantName whereHelperstring
	FoodName       whereHelpernull_String
	Address        whereHelpernull_String
	FullAddress    whereHelpernull_String
	IsLikeflag     whereHelpernull_Int
	Typecode       whereHelpernull_Int
	FAddTime       whereHelpertime_Time
	FUpdataTime    whereHelpernull_Time
	FirstTime      whereHelpernull_Time
	TestedFlag     whereHelpernull_Int
	FoodImg        whereHelpernull_String
	IsDel          whereHelpernull_Int
}{
	FoodId:         whereHelperint{field: "`g_food`.`foodId`"},
	UUserId:        whereHelperint{field: "`g_food`.`u_userId`"},
	RestaurantName: whereHelperstring{field: "`g_food`.`restaurantName`"},
	FoodName:       whereHelpernull_String{field: "`g_food`.`foodName`"},
	Address:        whereHelpernull_String{field: "`g_food`.`address`"},
	FullAddress:    whereHelpernull_String{field: "`g_food`.`fullAddress`"},
	IsLikeflag:     whereHelpernull_Int{field: "`g_food`.`isLikeflag`"},
	Typecode:       whereHelpernull_Int{field: "`g_food`.`typecode`"},
	FAddTime:       whereHelpertime_Time{field: "`g_food`.`f_addTime`"},
	FUpdataTime:    whereHelpernull_Time{field: "`g_food`.`f_updataTime`"},
	FirstTime:      whereHelpernull_Time{field: "`g_food`.`firstTime`"},
	TestedFlag:     whereHelpernull_Int{field: "`g_food`.`testedFlag`"},
	FoodImg:        whereHelpernull_String{field: "`g_food`.`foodImg`"},
	IsDel:          whereHelpernull_Int{field: "`g_food`.`isDel`"},
}

// GFoodRels is where relationship names are stored.
var GFoodRels = struct {
}{}

// gFoodR is where relationships are stored.
type gFoodR struct {
}

// NewStruct creates a new relationship struct
func (*gFoodR) NewStruct() *gFoodR {
	return &gFoodR{}
}

// gFoodL is where Load methods for each relationship are stored.
type gFoodL struct{}

var (
	gFoodAllColumns            = []string{"foodId", "u_userId", "restaurantName", "foodName", "address", "fullAddress", "isLikeflag", "typecode", "f_addTime", "f_updataTime", "firstTime", "testedFlag", "foodImg", "isDel"}
	gFoodColumnsWithoutDefault = []string{"foodId", "u_userId", "restaurantName", "foodName", "address", "fullAddress", "typecode", "f_addTime", "f_updataTime", "firstTime", "testedFlag", "foodImg"}
	gFoodColumnsWithDefault    = []string{"isLikeflag", "isDel"}
	gFoodPrimaryKeyColumns     = []string{"foodId"}
	gFoodGeneratedColumns      = []string{}
)

type (
	// GFoodSlice is an alias for a slice of pointers to GFood.
	// This should almost always be used instead of []GFood.
	GFoodSlice []*GFood
	// GFoodHook is the signature for custom GFood hook methods
	GFoodHook func(context.Context, boil.ContextExecutor, *GFood) error

	gFoodQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	gFoodType                 = reflect.TypeOf(&GFood{})
	gFoodMapping              = queries.MakeStructMapping(gFoodType)
	gFoodPrimaryKeyMapping, _ = queries.BindMapping(gFoodType, gFoodMapping, gFoodPrimaryKeyColumns)
	gFoodInsertCacheMut       sync.RWMutex
	gFoodInsertCache          = make(map[string]insertCache)
	gFoodUpdateCacheMut       sync.RWMutex
	gFoodUpdateCache          = make(map[string]updateCache)
	gFoodUpsertCacheMut       sync.RWMutex
	gFoodUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var gFoodAfterSelectHooks []GFoodHook

var gFoodBeforeInsertHooks []GFoodHook
var gFoodAfterInsertHooks []GFoodHook

var gFoodBeforeUpdateHooks []GFoodHook
var gFoodAfterUpdateHooks []GFoodHook

var gFoodBeforeDeleteHooks []GFoodHook
var gFoodAfterDeleteHooks []GFoodHook

var gFoodBeforeUpsertHooks []GFoodHook
var gFoodAfterUpsertHooks []GFoodHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *GFood) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gFoodAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *GFood) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gFoodBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *GFood) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gFoodAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *GFood) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gFoodBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *GFood) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gFoodAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *GFood) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gFoodBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *GFood) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gFoodAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *GFood) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gFoodBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *GFood) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gFoodAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddGFoodHook registers your hook function for all future operations.
func AddGFoodHook(hookPoint boil.HookPoint, gFoodHook GFoodHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		gFoodAfterSelectHooks = append(gFoodAfterSelectHooks, gFoodHook)
	case boil.BeforeInsertHook:
		gFoodBeforeInsertHooks = append(gFoodBeforeInsertHooks, gFoodHook)
	case boil.AfterInsertHook:
		gFoodAfterInsertHooks = append(gFoodAfterInsertHooks, gFoodHook)
	case boil.BeforeUpdateHook:
		gFoodBeforeUpdateHooks = append(gFoodBeforeUpdateHooks, gFoodHook)
	case boil.AfterUpdateHook:
		gFoodAfterUpdateHooks = append(gFoodAfterUpdateHooks, gFoodHook)
	case boil.BeforeDeleteHook:
		gFoodBeforeDeleteHooks = append(gFoodBeforeDeleteHooks, gFoodHook)
	case boil.AfterDeleteHook:
		gFoodAfterDeleteHooks = append(gFoodAfterDeleteHooks, gFoodHook)
	case boil.BeforeUpsertHook:
		gFoodBeforeUpsertHooks = append(gFoodBeforeUpsertHooks, gFoodHook)
	case boil.AfterUpsertHook:
		gFoodAfterUpsertHooks = append(gFoodAfterUpsertHooks, gFoodHook)
	}
}

// One returns a single gFood record from the query.
func (q gFoodQuery) One(ctx context.Context, exec boil.ContextExecutor) (*GFood, error) {
	o := &GFood{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "entity: failed to execute a one query for g_food")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all GFood records from the query.
func (q gFoodQuery) All(ctx context.Context, exec boil.ContextExecutor) (GFoodSlice, error) {
	var o []*GFood

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "entity: failed to assign all query results to GFood slice")
	}

	if len(gFoodAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all GFood records in the query.
func (q gFoodQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to count g_food rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q gFoodQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "entity: failed to check if g_food exists")
	}

	return count > 0, nil
}

// GFoods retrieves all the records using an executor.
func GFoods(mods ...qm.QueryMod) gFoodQuery {
	mods = append(mods, qm.From("`g_food`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`g_food`.*"})
	}

	return gFoodQuery{q}
}

// FindGFood retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindGFood(ctx context.Context, exec boil.ContextExecutor, foodId int, selectCols ...string) (*GFood, error) {
	gFoodObj := &GFood{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `g_food` where `foodId`=?", sel,
	)

	q := queries.Raw(query, foodId)

	err := q.Bind(ctx, exec, gFoodObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "entity: unable to select from g_food")
	}

	if err = gFoodObj.doAfterSelectHooks(ctx, exec); err != nil {
		return gFoodObj, err
	}

	return gFoodObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *GFood) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("entity: no g_food provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(gFoodColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	gFoodInsertCacheMut.RLock()
	cache, cached := gFoodInsertCache[key]
	gFoodInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			gFoodAllColumns,
			gFoodColumnsWithDefault,
			gFoodColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(gFoodType, gFoodMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(gFoodType, gFoodMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `g_food` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `g_food` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `g_food` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, gFoodPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "entity: unable to insert into g_food")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.FoodId,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "entity: unable to populate default values for g_food")
	}

CacheNoHooks:
	if !cached {
		gFoodInsertCacheMut.Lock()
		gFoodInsertCache[key] = cache
		gFoodInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the GFood.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *GFood) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	gFoodUpdateCacheMut.RLock()
	cache, cached := gFoodUpdateCache[key]
	gFoodUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			gFoodAllColumns,
			gFoodPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("entity: unable to update g_food, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `g_food` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, gFoodPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(gFoodType, gFoodMapping, append(wl, gFoodPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update g_food row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by update for g_food")
	}

	if !cached {
		gFoodUpdateCacheMut.Lock()
		gFoodUpdateCache[key] = cache
		gFoodUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q gFoodQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update all for g_food")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to retrieve rows affected for g_food")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o GFoodSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("entity: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), gFoodPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `g_food` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, gFoodPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update all in gFood slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to retrieve rows affected all in update all gFood")
	}
	return rowsAff, nil
}

var mySQLGFoodUniqueColumns = []string{
	"foodId",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *GFood) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("entity: no g_food provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(gFoodColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLGFoodUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	gFoodUpsertCacheMut.RLock()
	cache, cached := gFoodUpsertCache[key]
	gFoodUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			gFoodAllColumns,
			gFoodColumnsWithDefault,
			gFoodColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			gFoodAllColumns,
			gFoodPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("entity: unable to upsert g_food, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`g_food`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `g_food` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(gFoodType, gFoodMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(gFoodType, gFoodMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "entity: unable to upsert for g_food")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(gFoodType, gFoodMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "entity: unable to retrieve unique values for g_food")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "entity: unable to populate default values for g_food")
	}

CacheNoHooks:
	if !cached {
		gFoodUpsertCacheMut.Lock()
		gFoodUpsertCache[key] = cache
		gFoodUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single GFood record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *GFood) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("entity: no GFood provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), gFoodPrimaryKeyMapping)
	sql := "DELETE FROM `g_food` WHERE `foodId`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete from g_food")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by delete for g_food")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q gFoodQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("entity: no gFoodQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete all from g_food")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by deleteall for g_food")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o GFoodSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(gFoodBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), gFoodPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `g_food` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, gFoodPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete all from gFood slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by deleteall for g_food")
	}

	if len(gFoodAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *GFood) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindGFood(ctx, exec, o.FoodId)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *GFoodSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := GFoodSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), gFoodPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `g_food`.* FROM `g_food` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, gFoodPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "entity: unable to reload all in GFoodSlice")
	}

	*o = slice

	return nil
}

// GFoodExists checks if the GFood row exists.
func GFoodExists(ctx context.Context, exec boil.ContextExecutor, foodId int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `g_food` where `foodId`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, foodId)
	}
	row := exec.QueryRowContext(ctx, sql, foodId)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "entity: unable to check if g_food exists")
	}

	return exists, nil
}

// Exists checks if the GFood row exists.
func (o *GFood) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return GFoodExists(ctx, exec, o.FoodId)
}
