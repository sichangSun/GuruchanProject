// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package entity

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testGUsers(t *testing.T) {
	t.Parallel()

	query := GUsers()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testGUsersDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GUser{}
	if err = randomize.Struct(seed, o, gUserDBTypes, true, gUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GUser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := GUsers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testGUsersQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GUser{}
	if err = randomize.Struct(seed, o, gUserDBTypes, true, gUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GUser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := GUsers().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := GUsers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testGUsersSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GUser{}
	if err = randomize.Struct(seed, o, gUserDBTypes, true, gUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GUser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := GUserSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := GUsers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testGUsersExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GUser{}
	if err = randomize.Struct(seed, o, gUserDBTypes, true, gUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GUser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := GUserExists(ctx, tx, o.UserId)
	if err != nil {
		t.Errorf("Unable to check if GUser exists: %s", err)
	}
	if !e {
		t.Errorf("Expected GUserExists to return true, but got false.")
	}
}

func testGUsersFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GUser{}
	if err = randomize.Struct(seed, o, gUserDBTypes, true, gUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GUser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	gUserFound, err := FindGUser(ctx, tx, o.UserId)
	if err != nil {
		t.Error(err)
	}

	if gUserFound == nil {
		t.Error("want a record, got nil")
	}
}

func testGUsersBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GUser{}
	if err = randomize.Struct(seed, o, gUserDBTypes, true, gUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GUser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = GUsers().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testGUsersOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GUser{}
	if err = randomize.Struct(seed, o, gUserDBTypes, true, gUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GUser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := GUsers().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testGUsersAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	gUserOne := &GUser{}
	gUserTwo := &GUser{}
	if err = randomize.Struct(seed, gUserOne, gUserDBTypes, false, gUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GUser struct: %s", err)
	}
	if err = randomize.Struct(seed, gUserTwo, gUserDBTypes, false, gUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GUser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = gUserOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = gUserTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := GUsers().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testGUsersCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	gUserOne := &GUser{}
	gUserTwo := &GUser{}
	if err = randomize.Struct(seed, gUserOne, gUserDBTypes, false, gUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GUser struct: %s", err)
	}
	if err = randomize.Struct(seed, gUserTwo, gUserDBTypes, false, gUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GUser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = gUserOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = gUserTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := GUsers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func gUserBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *GUser) error {
	*o = GUser{}
	return nil
}

func gUserAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *GUser) error {
	*o = GUser{}
	return nil
}

func gUserAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *GUser) error {
	*o = GUser{}
	return nil
}

func gUserBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *GUser) error {
	*o = GUser{}
	return nil
}

func gUserAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *GUser) error {
	*o = GUser{}
	return nil
}

func gUserBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *GUser) error {
	*o = GUser{}
	return nil
}

func gUserAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *GUser) error {
	*o = GUser{}
	return nil
}

func gUserBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *GUser) error {
	*o = GUser{}
	return nil
}

func gUserAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *GUser) error {
	*o = GUser{}
	return nil
}

func testGUsersHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &GUser{}
	o := &GUser{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, gUserDBTypes, false); err != nil {
		t.Errorf("Unable to randomize GUser object: %s", err)
	}

	AddGUserHook(boil.BeforeInsertHook, gUserBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	gUserBeforeInsertHooks = []GUserHook{}

	AddGUserHook(boil.AfterInsertHook, gUserAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	gUserAfterInsertHooks = []GUserHook{}

	AddGUserHook(boil.AfterSelectHook, gUserAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	gUserAfterSelectHooks = []GUserHook{}

	AddGUserHook(boil.BeforeUpdateHook, gUserBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	gUserBeforeUpdateHooks = []GUserHook{}

	AddGUserHook(boil.AfterUpdateHook, gUserAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	gUserAfterUpdateHooks = []GUserHook{}

	AddGUserHook(boil.BeforeDeleteHook, gUserBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	gUserBeforeDeleteHooks = []GUserHook{}

	AddGUserHook(boil.AfterDeleteHook, gUserAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	gUserAfterDeleteHooks = []GUserHook{}

	AddGUserHook(boil.BeforeUpsertHook, gUserBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	gUserBeforeUpsertHooks = []GUserHook{}

	AddGUserHook(boil.AfterUpsertHook, gUserAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	gUserAfterUpsertHooks = []GUserHook{}
}

func testGUsersInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GUser{}
	if err = randomize.Struct(seed, o, gUserDBTypes, true, gUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GUser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := GUsers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testGUsersInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GUser{}
	if err = randomize.Struct(seed, o, gUserDBTypes, true); err != nil {
		t.Errorf("Unable to randomize GUser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(gUserColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := GUsers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testGUsersReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GUser{}
	if err = randomize.Struct(seed, o, gUserDBTypes, true, gUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GUser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testGUsersReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GUser{}
	if err = randomize.Struct(seed, o, gUserDBTypes, true, gUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GUser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := GUserSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testGUsersSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GUser{}
	if err = randomize.Struct(seed, o, gUserDBTypes, true, gUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GUser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := GUsers().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	gUserDBTypes = map[string]string{`UserId`: `int`, `UserName`: `varchar`, `UserPass`: `varchar`}
	_            = bytes.MinRead
)

func testGUsersUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(gUserPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(gUserAllColumns) == len(gUserPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &GUser{}
	if err = randomize.Struct(seed, o, gUserDBTypes, true, gUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GUser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := GUsers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, gUserDBTypes, true, gUserPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize GUser struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testGUsersSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(gUserAllColumns) == len(gUserPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &GUser{}
	if err = randomize.Struct(seed, o, gUserDBTypes, true, gUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GUser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := GUsers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, gUserDBTypes, true, gUserPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize GUser struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(gUserAllColumns, gUserPrimaryKeyColumns) {
		fields = gUserAllColumns
	} else {
		fields = strmangle.SetComplement(
			gUserAllColumns,
			gUserPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := GUserSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testGUsersUpsert(t *testing.T) {
	t.Parallel()

	if len(gUserAllColumns) == len(gUserPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLGUserUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := GUser{}
	if err = randomize.Struct(seed, &o, gUserDBTypes, false); err != nil {
		t.Errorf("Unable to randomize GUser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert GUser: %s", err)
	}

	count, err := GUsers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, gUserDBTypes, false, gUserPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize GUser struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert GUser: %s", err)
	}

	count, err = GUsers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
