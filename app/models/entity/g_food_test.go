// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package entity

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testGFoods(t *testing.T) {
	t.Parallel()

	query := GFoods()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testGFoodsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GFood{}
	if err = randomize.Struct(seed, o, gFoodDBTypes, true, gFoodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GFood struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := GFoods().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testGFoodsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GFood{}
	if err = randomize.Struct(seed, o, gFoodDBTypes, true, gFoodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GFood struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := GFoods().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := GFoods().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testGFoodsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GFood{}
	if err = randomize.Struct(seed, o, gFoodDBTypes, true, gFoodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GFood struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := GFoodSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := GFoods().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testGFoodsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GFood{}
	if err = randomize.Struct(seed, o, gFoodDBTypes, true, gFoodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GFood struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := GFoodExists(ctx, tx, o.FoodId)
	if err != nil {
		t.Errorf("Unable to check if GFood exists: %s", err)
	}
	if !e {
		t.Errorf("Expected GFoodExists to return true, but got false.")
	}
}

func testGFoodsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GFood{}
	if err = randomize.Struct(seed, o, gFoodDBTypes, true, gFoodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GFood struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	gFoodFound, err := FindGFood(ctx, tx, o.FoodId)
	if err != nil {
		t.Error(err)
	}

	if gFoodFound == nil {
		t.Error("want a record, got nil")
	}
}

func testGFoodsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GFood{}
	if err = randomize.Struct(seed, o, gFoodDBTypes, true, gFoodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GFood struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = GFoods().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testGFoodsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GFood{}
	if err = randomize.Struct(seed, o, gFoodDBTypes, true, gFoodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GFood struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := GFoods().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testGFoodsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	gFoodOne := &GFood{}
	gFoodTwo := &GFood{}
	if err = randomize.Struct(seed, gFoodOne, gFoodDBTypes, false, gFoodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GFood struct: %s", err)
	}
	if err = randomize.Struct(seed, gFoodTwo, gFoodDBTypes, false, gFoodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GFood struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = gFoodOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = gFoodTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := GFoods().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testGFoodsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	gFoodOne := &GFood{}
	gFoodTwo := &GFood{}
	if err = randomize.Struct(seed, gFoodOne, gFoodDBTypes, false, gFoodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GFood struct: %s", err)
	}
	if err = randomize.Struct(seed, gFoodTwo, gFoodDBTypes, false, gFoodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GFood struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = gFoodOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = gFoodTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := GFoods().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func gFoodBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *GFood) error {
	*o = GFood{}
	return nil
}

func gFoodAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *GFood) error {
	*o = GFood{}
	return nil
}

func gFoodAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *GFood) error {
	*o = GFood{}
	return nil
}

func gFoodBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *GFood) error {
	*o = GFood{}
	return nil
}

func gFoodAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *GFood) error {
	*o = GFood{}
	return nil
}

func gFoodBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *GFood) error {
	*o = GFood{}
	return nil
}

func gFoodAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *GFood) error {
	*o = GFood{}
	return nil
}

func gFoodBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *GFood) error {
	*o = GFood{}
	return nil
}

func gFoodAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *GFood) error {
	*o = GFood{}
	return nil
}

func testGFoodsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &GFood{}
	o := &GFood{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, gFoodDBTypes, false); err != nil {
		t.Errorf("Unable to randomize GFood object: %s", err)
	}

	AddGFoodHook(boil.BeforeInsertHook, gFoodBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	gFoodBeforeInsertHooks = []GFoodHook{}

	AddGFoodHook(boil.AfterInsertHook, gFoodAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	gFoodAfterInsertHooks = []GFoodHook{}

	AddGFoodHook(boil.AfterSelectHook, gFoodAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	gFoodAfterSelectHooks = []GFoodHook{}

	AddGFoodHook(boil.BeforeUpdateHook, gFoodBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	gFoodBeforeUpdateHooks = []GFoodHook{}

	AddGFoodHook(boil.AfterUpdateHook, gFoodAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	gFoodAfterUpdateHooks = []GFoodHook{}

	AddGFoodHook(boil.BeforeDeleteHook, gFoodBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	gFoodBeforeDeleteHooks = []GFoodHook{}

	AddGFoodHook(boil.AfterDeleteHook, gFoodAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	gFoodAfterDeleteHooks = []GFoodHook{}

	AddGFoodHook(boil.BeforeUpsertHook, gFoodBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	gFoodBeforeUpsertHooks = []GFoodHook{}

	AddGFoodHook(boil.AfterUpsertHook, gFoodAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	gFoodAfterUpsertHooks = []GFoodHook{}
}

func testGFoodsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GFood{}
	if err = randomize.Struct(seed, o, gFoodDBTypes, true, gFoodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GFood struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := GFoods().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testGFoodsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GFood{}
	if err = randomize.Struct(seed, o, gFoodDBTypes, true); err != nil {
		t.Errorf("Unable to randomize GFood struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(gFoodColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := GFoods().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testGFoodsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GFood{}
	if err = randomize.Struct(seed, o, gFoodDBTypes, true, gFoodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GFood struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testGFoodsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GFood{}
	if err = randomize.Struct(seed, o, gFoodDBTypes, true, gFoodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GFood struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := GFoodSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testGFoodsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GFood{}
	if err = randomize.Struct(seed, o, gFoodDBTypes, true, gFoodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GFood struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := GFoods().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	gFoodDBTypes = map[string]string{`FoodId`: `int`, `UUserId`: `int`, `RestaurantName`: `varchar`, `FoodName`: `varchar`, `Address`: `varchar`, `FullAddress`: `varchar`, `IsLikeflag`: `int`, `Typecode`: `int`, `FAddTime`: `timestamp`, `FUpdataTime`: `timestamp`, `FirstTime`: `timestamp`, `TestedFlag`: `int`, `FoodImg`: `varchar`, `IsDel`: `int`}
	_            = bytes.MinRead
)

func testGFoodsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(gFoodPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(gFoodAllColumns) == len(gFoodPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &GFood{}
	if err = randomize.Struct(seed, o, gFoodDBTypes, true, gFoodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GFood struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := GFoods().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, gFoodDBTypes, true, gFoodPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize GFood struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testGFoodsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(gFoodAllColumns) == len(gFoodPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &GFood{}
	if err = randomize.Struct(seed, o, gFoodDBTypes, true, gFoodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GFood struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := GFoods().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, gFoodDBTypes, true, gFoodPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize GFood struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(gFoodAllColumns, gFoodPrimaryKeyColumns) {
		fields = gFoodAllColumns
	} else {
		fields = strmangle.SetComplement(
			gFoodAllColumns,
			gFoodPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := GFoodSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testGFoodsUpsert(t *testing.T) {
	t.Parallel()

	if len(gFoodAllColumns) == len(gFoodPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLGFoodUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := GFood{}
	if err = randomize.Struct(seed, &o, gFoodDBTypes, false); err != nil {
		t.Errorf("Unable to randomize GFood struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert GFood: %s", err)
	}

	count, err := GFoods().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, gFoodDBTypes, false, gFoodPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize GFood struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert GFood: %s", err)
	}

	count, err = GFoods().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
