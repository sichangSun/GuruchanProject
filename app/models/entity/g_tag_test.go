// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package entity

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testGTags(t *testing.T) {
	t.Parallel()

	query := GTags()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testGTagsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GTag{}
	if err = randomize.Struct(seed, o, gTagDBTypes, true, gTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := GTags().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testGTagsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GTag{}
	if err = randomize.Struct(seed, o, gTagDBTypes, true, gTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := GTags().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := GTags().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testGTagsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GTag{}
	if err = randomize.Struct(seed, o, gTagDBTypes, true, gTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := GTagSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := GTags().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testGTagsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GTag{}
	if err = randomize.Struct(seed, o, gTagDBTypes, true, gTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := GTagExists(ctx, tx, o.TagId)
	if err != nil {
		t.Errorf("Unable to check if GTag exists: %s", err)
	}
	if !e {
		t.Errorf("Expected GTagExists to return true, but got false.")
	}
}

func testGTagsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GTag{}
	if err = randomize.Struct(seed, o, gTagDBTypes, true, gTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	gTagFound, err := FindGTag(ctx, tx, o.TagId)
	if err != nil {
		t.Error(err)
	}

	if gTagFound == nil {
		t.Error("want a record, got nil")
	}
}

func testGTagsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GTag{}
	if err = randomize.Struct(seed, o, gTagDBTypes, true, gTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = GTags().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testGTagsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GTag{}
	if err = randomize.Struct(seed, o, gTagDBTypes, true, gTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := GTags().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testGTagsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	gTagOne := &GTag{}
	gTagTwo := &GTag{}
	if err = randomize.Struct(seed, gTagOne, gTagDBTypes, false, gTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GTag struct: %s", err)
	}
	if err = randomize.Struct(seed, gTagTwo, gTagDBTypes, false, gTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = gTagOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = gTagTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := GTags().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testGTagsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	gTagOne := &GTag{}
	gTagTwo := &GTag{}
	if err = randomize.Struct(seed, gTagOne, gTagDBTypes, false, gTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GTag struct: %s", err)
	}
	if err = randomize.Struct(seed, gTagTwo, gTagDBTypes, false, gTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = gTagOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = gTagTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := GTags().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func gTagBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *GTag) error {
	*o = GTag{}
	return nil
}

func gTagAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *GTag) error {
	*o = GTag{}
	return nil
}

func gTagAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *GTag) error {
	*o = GTag{}
	return nil
}

func gTagBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *GTag) error {
	*o = GTag{}
	return nil
}

func gTagAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *GTag) error {
	*o = GTag{}
	return nil
}

func gTagBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *GTag) error {
	*o = GTag{}
	return nil
}

func gTagAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *GTag) error {
	*o = GTag{}
	return nil
}

func gTagBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *GTag) error {
	*o = GTag{}
	return nil
}

func gTagAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *GTag) error {
	*o = GTag{}
	return nil
}

func testGTagsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &GTag{}
	o := &GTag{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, gTagDBTypes, false); err != nil {
		t.Errorf("Unable to randomize GTag object: %s", err)
	}

	AddGTagHook(boil.BeforeInsertHook, gTagBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	gTagBeforeInsertHooks = []GTagHook{}

	AddGTagHook(boil.AfterInsertHook, gTagAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	gTagAfterInsertHooks = []GTagHook{}

	AddGTagHook(boil.AfterSelectHook, gTagAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	gTagAfterSelectHooks = []GTagHook{}

	AddGTagHook(boil.BeforeUpdateHook, gTagBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	gTagBeforeUpdateHooks = []GTagHook{}

	AddGTagHook(boil.AfterUpdateHook, gTagAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	gTagAfterUpdateHooks = []GTagHook{}

	AddGTagHook(boil.BeforeDeleteHook, gTagBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	gTagBeforeDeleteHooks = []GTagHook{}

	AddGTagHook(boil.AfterDeleteHook, gTagAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	gTagAfterDeleteHooks = []GTagHook{}

	AddGTagHook(boil.BeforeUpsertHook, gTagBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	gTagBeforeUpsertHooks = []GTagHook{}

	AddGTagHook(boil.AfterUpsertHook, gTagAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	gTagAfterUpsertHooks = []GTagHook{}
}

func testGTagsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GTag{}
	if err = randomize.Struct(seed, o, gTagDBTypes, true, gTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := GTags().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testGTagsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GTag{}
	if err = randomize.Struct(seed, o, gTagDBTypes, true); err != nil {
		t.Errorf("Unable to randomize GTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(gTagColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := GTags().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testGTagsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GTag{}
	if err = randomize.Struct(seed, o, gTagDBTypes, true, gTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testGTagsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GTag{}
	if err = randomize.Struct(seed, o, gTagDBTypes, true, gTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := GTagSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testGTagsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GTag{}
	if err = randomize.Struct(seed, o, gTagDBTypes, true, gTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := GTags().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	gTagDBTypes = map[string]string{`TagId`: `int`, `UUserId`: `int`, `FFoodId`: `int`, `TagTittle`: `varchar`, `Typecode`: `int`, `TAddTime`: `timestamp`, `TUpdataTime`: `timestamp`, `IsDel`: `int`}
	_           = bytes.MinRead
)

func testGTagsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(gTagPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(gTagAllColumns) == len(gTagPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &GTag{}
	if err = randomize.Struct(seed, o, gTagDBTypes, true, gTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := GTags().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, gTagDBTypes, true, gTagPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize GTag struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testGTagsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(gTagAllColumns) == len(gTagPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &GTag{}
	if err = randomize.Struct(seed, o, gTagDBTypes, true, gTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := GTags().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, gTagDBTypes, true, gTagPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize GTag struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(gTagAllColumns, gTagPrimaryKeyColumns) {
		fields = gTagAllColumns
	} else {
		fields = strmangle.SetComplement(
			gTagAllColumns,
			gTagPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := GTagSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testGTagsUpsert(t *testing.T) {
	t.Parallel()

	if len(gTagAllColumns) == len(gTagPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLGTagUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := GTag{}
	if err = randomize.Struct(seed, &o, gTagDBTypes, false); err != nil {
		t.Errorf("Unable to randomize GTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert GTag: %s", err)
	}

	count, err := GTags().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, gTagDBTypes, false, gTagPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize GTag struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert GTag: %s", err)
	}

	count, err = GTags().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
